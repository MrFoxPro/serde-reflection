// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.28.0
// source: bench.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "";

export interface Test {
  string: string;
  uint32: number;
  inner: Test_Inner | undefined;
  float: number;
}

export enum Test_Enum {
  ONE = 0,
  TWO = 1,
  THREE = 2,
  FOUR = 3,
  FIVE = 4,
  UNRECOGNIZED = -1,
}

export interface Test_Inner {
  int32: number;
  innerInner: Test_Inner_InnerInner | undefined;
  outer: Outer | undefined;
}

export interface Test_Inner_InnerInner {
  long: number;
  enum: Test_Enum;
  sint32: number;
}

export interface Outer {
  bool: boolean[];
  /** make sure to set something that's fair to JSON */
  double: number;
}

function createBaseTest(): Test {
  return { string: "", uint32: 0, inner: undefined, float: 0 };
}

export const Test = {
  encode(message: Test, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.string !== "") {
      writer.uint32(10).string(message.string);
    }
    if (message.uint32 !== 0) {
      writer.uint32(16).uint32(message.uint32);
    }
    if (message.inner !== undefined) {
      Test_Inner.encode(message.inner, writer.uint32(26).fork()).ldelim();
    }
    if (message.float !== 0) {
      writer.uint32(37).float(message.float);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Test {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.string = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.uint32 = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.inner = Test_Inner.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.float = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<Test>, I>>(base?: I): Test {
    return Test.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Test>, I>>(object: I): Test {
    const message = createBaseTest();
    message.string = object.string ?? "";
    message.uint32 = object.uint32 ?? 0;
    message.inner = (object.inner !== undefined && object.inner !== null)
      ? Test_Inner.fromPartial(object.inner)
      : undefined;
    message.float = object.float ?? 0;
    return message;
  },
};

function createBaseTest_Inner(): Test_Inner {
  return { int32: 0, innerInner: undefined, outer: undefined };
}

export const Test_Inner = {
  encode(message: Test_Inner, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.int32 !== 0) {
      writer.uint32(8).int32(message.int32);
    }
    if (message.innerInner !== undefined) {
      Test_Inner_InnerInner.encode(message.innerInner, writer.uint32(18).fork()).ldelim();
    }
    if (message.outer !== undefined) {
      Outer.encode(message.outer, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Test_Inner {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTest_Inner();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.int32 = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.innerInner = Test_Inner_InnerInner.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.outer = Outer.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<Test_Inner>, I>>(base?: I): Test_Inner {
    return Test_Inner.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Test_Inner>, I>>(object: I): Test_Inner {
    const message = createBaseTest_Inner();
    message.int32 = object.int32 ?? 0;
    message.innerInner = (object.innerInner !== undefined && object.innerInner !== null)
      ? Test_Inner_InnerInner.fromPartial(object.innerInner)
      : undefined;
    message.outer = (object.outer !== undefined && object.outer !== null) ? Outer.fromPartial(object.outer) : undefined;
    return message;
  },
};

function createBaseTest_Inner_InnerInner(): Test_Inner_InnerInner {
  return { long: 0, enum: 0, sint32: 0 };
}

export const Test_Inner_InnerInner = {
  encode(message: Test_Inner_InnerInner, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.long !== 0) {
      writer.uint32(8).int64(message.long);
    }
    if (message.enum !== 0) {
      writer.uint32(16).int32(message.enum);
    }
    if (message.sint32 !== 0) {
      writer.uint32(24).sint32(message.sint32);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Test_Inner_InnerInner {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTest_Inner_InnerInner();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.long = longToNumber(reader.int64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.enum = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.sint32 = reader.sint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<Test_Inner_InnerInner>, I>>(base?: I): Test_Inner_InnerInner {
    return Test_Inner_InnerInner.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Test_Inner_InnerInner>, I>>(object: I): Test_Inner_InnerInner {
    const message = createBaseTest_Inner_InnerInner();
    message.long = object.long ?? 0;
    message.enum = object.enum ?? 0;
    message.sint32 = object.sint32 ?? 0;
    return message;
  },
};

function createBaseOuter(): Outer {
  return { bool: [], double: 0 };
}

export const Outer = {
  encode(message: Outer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.bool) {
      writer.bool(v);
    }
    writer.ldelim();
    if (message.double !== 0) {
      writer.uint32(17).double(message.double);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Outer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOuter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.bool.push(reader.bool());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.bool.push(reader.bool());
            }

            continue;
          }

          break;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.double = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<Outer>, I>>(base?: I): Outer {
    return Outer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Outer>, I>>(object: I): Outer {
    const message = createBaseOuter();
    message.bool = object.bool?.map((e) => e) || [];
    message.double = object.double ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}
